import sys
import os
from dotenv import load_dotenv

# üü¢ Carrega vari√°veis do .env antes de qualquer configura√ß√£o
load_dotenv()

# üõ† Ajusta o path para garantir importa√ß√µes corretas
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# üîß Cria o app com configura√ß√µes do .env
from app import create_app
app = create_app()

# üß™ Mostra qual banco est√° conectado
print("üîç URI ativa:", app.config['SQLALCHEMY_DATABASE_URI'])

# üì¶ Importa extens√µes e modelos necess√°rios para a cria√ß√£o
from app.ext import db
from app.models.modelos import (
    Status, TipoDemanda, RegiaoAdministrativa, Demanda,
    ProtocoloAtendimento, InteracaoAtendimento
)

with app.app_context():
    # ‚úÖ Cria apenas as tabelas que ainda n√£o existem
    db.create_all()

    # ------------------
    # TIPOS DE DEMANDA
    # ------------------
    tipos = sorted(["Zeladoria", "Implanta√ß√£o", "Indiv√≠duo Arb√≥reo"])
    for descricao in tipos:
        if not TipoDemanda.query.filter_by(descricao=descricao).first():
            db.session.add(TipoDemanda(descricao=descricao))

    # ------------------
    # STATUS
    # ------------------
    status_lista = sorted([
        ("Devolvido √† RA de origem ‚Äì adequa√ß√£o de requisitos", 1, False),
        ("Devolvido √† RA de origem ‚Äì parecer t√©cnico de outro √≥rg√£o", 2, False),
        ("Devolvido √† RA de origem ‚Äì servi√ßo com contrato de natureza continuada pela DC/DO", 3, False),
        ("Devolvido √† RA de origem ‚Äì implanta√ß√£o", 4, False),
        ("Enviado √† Diretoria das Cidades", 5, False),
        ("Enviado √† Diretoria de Obras", 6, False),
        ("Improcedente ‚Äì tramita√ß√£o via SGIA", 7, False),
        ("Improcedente ‚Äì tramita por √≥rg√£o diferente da NOVACAP", 8, False),
        ("Encerrado pela RA de origem", 9, True),
        ("Atendido", 10, True)
    ], key=lambda x: x[0])

    for descricao, ordem, finaliza in status_lista:
        if not Status.query.filter_by(descricao=descricao).first():
            db.session.add(Status(descricao=descricao, ordem_exibicao=ordem, finaliza_processo=finaliza))

    # ------------------
    # REGI√ïES ADMINISTRATIVAS
    # ------------------
    regioes = [
        ("RA I", "Plano Piloto"),
        ("RA II", "Gama"),
        ("RA III", "Taguatinga"),
        ("RA IV", "Brazl√¢ndia"),
        ("RA V", "Sobradinho"),
        ("RA VI", "Planaltina"),
        ("RA VII", "Parano√°"),
        ("RA VIII", "N√∫cleo Bandeirante"),
        ("RA IX", "Ceil√¢ndia"),
        ("RA X", "Guar√°"),
        ("RA XI", "Cruzeiro"),
        ("RA XII", "Samambaia"),
        ("RA XIII", "Santa Maria"),
        ("RA XIV", "S√£o Sebasti√£o"),
        ("RA XV", "Recanto das Emas"),
        ("RA XVI", "Lago Sul"),
        ("RA XVII", "Riacho Fundo"),
        ("RA XVIII", "Lago Norte"),
        ("RA XIX", "Candangol√¢ndia"),
        ("RA XX", "√Åguas Claras"),
        ("RA XXI", "Riacho Fundo II"),
        ("RA XXII", "Sudoeste/Octogonal"),
        ("RA XXIII", "Varj√£o"),
        ("RA XXIV", "Park Way"),
        ("RA XXV", "SCIA ‚Äì Estrutural"),
        ("RA XXVI", "Sobradinho II"),
        ("RA XXVII", "Jardim Bot√¢nico"),
        ("RA XXVIII", "Itapo√£"),
        ("RA XXIX", "SIA"),
        ("RA XXX", "Vicente Pires"),
        ("RA XXXI", "Fercal"),
        ("RA XXXII", "Sol Nascente/P√¥r do Sol"),
        ("RA XXXIII", "Arniqueira"),
        ("RA XXXIV", "Arapoanga"),
        ("RA XXXV", "√Ågua Quente")
    ]

    for codigo, nome in regioes:
        descricao = f"{nome} ({codigo})"
        if not RegiaoAdministrativa.query.filter_by(codigo_ra=codigo).first():
            db.session.add(RegiaoAdministrativa(codigo_ra=codigo, nome_ra=nome, descricao_ra=descricao))

    # ------------------
    # DEMANDAS
    # ------------------
    demandas = [
        "Alambrado (Cercamento)", "Boca de Lobo", "Bueiro", "Cal√ßada", "Doa√ß√£o de Mudas",
        "Estacionamentos", "Galeria de √Åguas Pluviais", "Jardim", "Mato Alto", "Meio-fio",
        "Parque Infantil", "Passagem Subterr√¢nea", "Passarela", "Pisos Articulados",
        "Pista de Skate", "Poda / Supress√£o de √Årvore", "Ponto de Encontro Comunit√°rio (PEC)",
        "Pra√ßa", "Quadra de Esporte", "Rampa", "Rua, Via ou Rodovia (Pista)", "Tapa-buraco",
        "Limpeza de Res√≠duos da Novacap"
    ]
    for d in sorted(demandas):
        if not Demanda.query.filter_by(descricao=d).first():
            db.session.add(Demanda(descricao=d))

    # üíæ Finaliza a transa√ß√£o
    db.session.commit()
    print("‚úÖ Tabelas criadas (se necess√°rio) e dados essenciais inseridos com sucesso!")
