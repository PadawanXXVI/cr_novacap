# app/_init_.py
"""
Inicializa√ß√£o principal do sistema CR-NOVACAP ‚Äî Controle de Processos e Atendimentos.
Configura√ß√µes globais, registro de extens√µes e blueprints institucionais.
"""

import os
from datetime import timedelta, datetime
from dotenv import load_dotenv
from flask import Flask, redirect, url_for

# ==========================================================
# üîí Carrega vari√°veis de ambiente
# ==========================================================
load_dotenv()

# ==========================================================
# ‚öô Extens√µes principais
# ==========================================================
from app.ext import db, migrate, login_manager, csrf
from app.models.modelos import Usuario

# ==========================================================
# üì¶ Importa√ß√£o dos Blueprints
# ==========================================================
from app.main import main_bp
from app.processos import processos_bp
from app.protocolo import protocolo_bp
from app.relatorios import relatorios_bp
from app.admin import admin_bp


# ==========================================================
# üèó Factory principal do sistema CR-NOVACAP
# ==========================================================
def create_app():
    """Cria e configura a aplica√ß√£o Flask principal."""
    app = Flask(_name_)

    # ------------------------------------------------------
    # üîß Configura√ß√µes b√°sicas do sistema
    # ------------------------------------------------------
    app.config.update(
        SECRET_KEY=os.getenv('SECRET_KEY', 'chave-secreta-padrao'),
        SQLALCHEMY_DATABASE_URI=os.getenv('DATABASE_URL'),
        SQLALCHEMY_TRACK_MODIFICATIONS=False,
        PERMANENT_SESSION_LIFETIME=timedelta(hours=1),
    )

    # ------------------------------------------------------
    # üöÄ Inicializa√ß√£o das extens√µes
    # ------------------------------------------------------
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    csrf.init_app(app)

    # ------------------------------------------------------
    # üîê Configura√ß√£o de autentica√ß√£o (Flask-Login)
    # ------------------------------------------------------
    login_manager.login_view = 'main_bp.login'
    login_manager.login_message = "Por favor, fa√ßa login para acessar esta p√°gina."
    login_manager.login_message_category = "warning"

    @login_manager.user_loader
    def load_user(user_id):
        """Carrega o usu√°rio autenticado na sess√£o."""
        return Usuario.query.get(int(user_id))

    # ------------------------------------------------------
    # üì¶ Registro de Blueprints institucionais
    # (cada m√≥dulo j√° define seu url_prefix internamente)
    # ------------------------------------------------------
    app.register_blueprint(main_bp)
    app.register_blueprint(processos_bp)
    app.register_blueprint(protocolo_bp)
    app.register_blueprint(relatorios_bp)
    app.register_blueprint(admin_bp)

    # ------------------------------------------------------
    # üè† Rota padr√£o (redireciona para login)
    # ------------------------------------------------------
    @app.route('/')
    def home_redirect():
        return redirect(url_for('main_bp.login'))

    # ------------------------------------------------------
    # üìÖ Contexto global (ano atual no rodap√©)
    # ------------------------------------------------------
    @app.context_processor
    def inject_year():
        """Adiciona o ano atual ao contexto global."""
        return {'current_year': datetime.now().year}

    return app
